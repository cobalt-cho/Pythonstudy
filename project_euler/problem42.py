'''

n번째 삼각수는 tn = ½ n (n + 1) 이라는 식으로 구할 수 있는데, 처음 10개는 아래와 같습니다.

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

어떤 영어 단어에 대해서, 각 철자의 알파벳 순서(A=1, B=2, ..., Z=26)를 모두 더한 값을 '단어값'이라 부르기로 합니다. 예를 들어 'SKY'의 단어값은 19 + 11 + 25 = 55가 되는데, 이것은 우연히도 t10과 같습니다.
이렇게 어떤 단어의 단어값이 삼각수일 경우에는 이 단어를 '삼각단어'라 부르기로 합니다.

약 16KB의 텍스트 파일 words.txt에는 2000개 정도의 영어 단어가 수록되어 있습니다. 이 중에서 삼각단어는 모두 몇 개입니까?

'''

dic = {"A":1,"B":2,"C":3,"D":4,"E":5,"F":6,"G":7,"H":8,"I":9,"J":10,"K":11,"L":12,
       "M":13,"N":14,"O":15,"P":16,"Q":17,"R":18,"S":19,"T":20,"U":21,"V":22,"W":23,"X":24,"Y":25,"Z":26}


f= open('words.txt','r') # 파일 읽기
li = f.readline().split(",")
li2 = []

for i in li :
    a = i.replace('\"',"") # "를 제거하고 다른 리스트에 저장
    li2.append(a)

li2.sort() # 알파벳순으로 정렬

tri_li = [int((1/2)*i*(i+1)) for i in range(1,10000)] # 삼각수 리스트

cnt = 0
for i in range(len(li2)):
    sum = 0
    for j in li2[i] :
        if j in dic :
           sum+=dic[j]
    if sum in tri_li :
        cnt+=1

print(cnt)
